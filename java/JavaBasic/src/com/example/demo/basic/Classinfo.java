// 패키지 내부에서 클래스 생성 -> 무조건 패키지 표식 자동추가됨
package com.example.demo.basic;


/*
* 클래스 정의
* - 클래스 (class)
*       - 코드로 존재
*       - 객체를 생성(구현)하기 위한 설계도면(청사진, 붕어빵 기계...등)
*       - 변수(필드), 메소드(함수), 생성자로 구성
*
* - 객체 (object)
*       - 메모리상에 존재
*       - 클래스를 기반으로 생성 ( 클래스와 유사하게 생겼음)
*       - 클래스의 인스턴스가 객체이다 (붕어빵)
*
* - 클래스 문법
* [모디파이어] class 클래스명(첫글자 대문자)
* [extends 부모클래스명(상속표현)]
* [implements 인터페이스명(다중상속표현)] <- 클래스 선언부
* { <- 클래스 코드블럭
*   멤버 변수
* 멤버 메소드
* 생성자
* inner class(내부클래스)
*  }
*/

// 1. 클래스 정의(간단하게)
//    자바에서 클래스는 코드 작성 단위 -> 클래스 단위로 개발
    class Person{ }
// 2. 멤버 추가
    class Person2 {
        // 멤버(클래스 내부에서 정의), 변수(변수 구성 문법 고려), 범위: 전역변수
        String name;
        int age;
        // 멤버 메소드
    void info() {
        System.out.println("Person2 info" + name + " " + age);
    }
}

// 1개의 자바 파일안에 여러개의 class가 존재할 수 있다.
// 파일명과 일치하는 클래스, 그안에 main 함수가 존재하면 문제 없다.
public class Classinfo {
    //메인 메소드
    // J2SE(PC 기반 유저 대상 자바 개발시 사용하는 버전)
    // 반드시 main 메소드가 존재해야 한다(규칙)
    // 가장 먼저 메모리에 상주, 호출되야 한다.(규칙)
    // args: 자바 구동시 전달할 매개 변수가 있다면 받는다
    // 통상적으로는 전달 X
    // main 시작점, 엔트리 포인트!
    public static void main(String[] args) {
        // 클래스는 객체의 툴(청사진, ...) -> 메모리에 객체를 띄우는게 목표 -> 프로그램 작동
        // 객체 생성법 => new 클래스명([매개변수]);

        //객체 생성 -> 인텔리J 해석 -> 코드 가이드 : AI로 처리하는 패턴
        // Person p <- 참초형(타입) 변수!! 클래스명 => 내가 만든 참조형 타입이 된다.
        // 참조형 변수 = 객체 !
        Person p = new Person();
        Person2 p2 = new Person2();
        // p2는 멤버 존재 => 접근 => 객체명.멤버 : 도트(.) 연산자로 접근
        p2.name = "게스트";
        p2.age = 30;
        //멤버 함수 사용
        p2.info();
    }
}
